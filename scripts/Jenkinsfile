//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR WMS application.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    REPOSITORY_MANAGER_USER: The user to use when pushing artifacts
//    REPOSITORY_MANAGER_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================
def notifyObj

// TODO: get to run on any node
node(""){
    def workspaceDir = pwd()
    def appName = "omar-basemap"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES="${workspaceDir}/${omarCommonProjName}/omar-common-properties.gradle"

    stage("Checkout"){
        dir(appName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${appName}.git"
        }

        dir(omarCommonProjName) {
            git branch: "${OSSIM_GIT_BRANCH}", url: "${GIT_PUBLIC_SERVER_URL}/${omarCommonProjName}.git"
        }
        
    }

    stage("Download Artifacts"){
       step ([$class: "CopyArtifact",
             projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
             filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
             flatten: true])
       sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
       notifyObj = load "${workspaceDir}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
      stage ("Publish Docker App")
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerCredentials',
                        usernameVariable: 'OPENSHIFT_USERNAME',
                        passwordVariable: 'OPENSHIFT_PASSWORD']])
        {
            // Run all tasks on the app. This includes pushing to OpenShift and S3.
            sh """
            pushd ${workspaceDir}/${appName}/
            gradle ${GRADLE_TASK}
            popd
            """
        }
      }
    }
    catch(e){
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
    
    try {
        stage('HPFortify Analysis') {
            dir(appName) {
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/sourceanalyzer -64 -b ${appName} -clean"
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/sourceanalyzer -64 -b ${appName} -verbose /media/ephemeral0/jenkins/workspace/${appName}-dev/${appName}/docker/public/resources/*.js /media/ephemeral0/jenkins/workspace/${appName}-dev/${appName}/docker/src/*.js /media/ephemeral0/jenkins/workspace/${appName}-dev/${appName}/docker/test/*.js /media/ephemeral0/jenkins/workspace/${appName}-dev/${appName}/*.js"
            
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/sourceanalyzer -64 -b ${appName} -show-files"
                
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/sourceanalyzer -64 -b ${appName} -scan -Xmx8G -f fortifyResults-${appName}-app.fpr"
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/ReportGenerator -format pdf -f fortifyResults-${appName}.pdf -source fortifyResults-${appName}-app.fpr"
              sh "aws s3 cp fortifyResults-${appName}.pdf s3://o2-private/hpfortify/fortify-reports/"
              sh "/opt/HPE_Security/Fortify_SCA_and_Apps_17.20/bin/fortifyclient -url http://hpfortify.ossim.io:8080/ssc -authtoken 02c59c7f-a092-45c3-be81-9b7f9dae5728 uploadFPR -file fortifyResults-${appName}-app.fpr -applicationVersionID 2"
            }
        }
   }
   catch (e) {
      echo e.toString()
   }
    
  stage("Clean Workspace"){
     step([$class: 'WsCleanup'])
  }
}
